[pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts = 
    --verbose
    --showlocals
    --tb=short
    --cov=src
    --cov-report=html
    --cov-report=term-missing
    --cov-config=tests/config_test.yaml
    --strict-markers
    --durations=10

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_file = test_execution.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    visualization: marks visualization tests
    dnabert: marks DNABERT-related tests
    sequence: marks sequence analysis tests

# Environment variables
env =
    D:PYTHONPATH=src
    D:TEST_ENV=true
    D:COVERAGE_FILE=.coverage

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
    ignore::RuntimeWarning:numpy.*
    ignore::ImportWarning
    default::pytest.PytestUnhandledThreadExceptionWarning

# Timeout settings (in seconds)
timeout = 300

# Coverage configuration
[coverage:run]
branch = True
source = src
omit =
    */DNABERT_2/*
    tests/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError:
show_missing = True
skip_covered = True

[coverage:html]
directory = coverage_report
title = siRNA Analysis Pipeline Test Coverage Report